// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SwapFilled extends ethereum.Event {
  get params(): SwapFilled__Params {
    return new SwapFilled__Params(this);
  }
}

export class SwapFilled__Params {
  _event: SwapFilled;

  constructor(event: SwapFilled) {
    this._event = event;
  }

  get erc20Addr(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get bscTxHash(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get toAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class SwapPairRegister extends ethereum.Event {
  get params(): SwapPairRegister__Params {
    return new SwapPairRegister__Params(this);
  }
}

export class SwapPairRegister__Params {
  _event: SwapPairRegister;

  constructor(event: SwapPairRegister) {
    this._event = event;
  }

  get sponsor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get erc20Addr(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get name(): string {
    return this._event.parameters[2].value.toString();
  }

  get symbol(): string {
    return this._event.parameters[3].value.toString();
  }

  get decimals(): i32 {
    return this._event.parameters[4].value.toI32();
  }
}

export class SwapStarted extends ethereum.Event {
  get params(): SwapStarted__Params {
    return new SwapStarted__Params(this);
  }
}

export class SwapStarted__Params {
  _event: SwapStarted;

  constructor(event: SwapStarted) {
    this._event = event;
  }

  get erc20Addr(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get fromAddr(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get feeAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ZamBridgeETH extends ethereum.SmartContract {
  static bind(address: Address): ZamBridgeETH {
    return new ZamBridgeETH("ZamBridgeETH", address);
  }

  fillBSC2ETHSwap(
    bscTxHash: Bytes,
    erc20Addr: Address,
    toAddress: Address,
    amount: BigInt
  ): boolean {
    let result = super.call(
      "fillBSC2ETHSwap",
      "fillBSC2ETHSwap(bytes32,address,address,uint256):(bool)",
      [
        ethereum.Value.fromFixedBytes(bscTxHash),
        ethereum.Value.fromAddress(erc20Addr),
        ethereum.Value.fromAddress(toAddress),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_fillBSC2ETHSwap(
    bscTxHash: Bytes,
    erc20Addr: Address,
    toAddress: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "fillBSC2ETHSwap",
      "fillBSC2ETHSwap(bytes32,address,address,uint256):(bool)",
      [
        ethereum.Value.fromFixedBytes(bscTxHash),
        ethereum.Value.fromAddress(erc20Addr),
        ethereum.Value.fromAddress(toAddress),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  filledBSCTx(param0: Bytes): boolean {
    let result = super.call("filledBSCTx", "filledBSCTx(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);

    return result[0].toBoolean();
  }

  try_filledBSCTx(param0: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall("filledBSCTx", "filledBSCTx(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  registerSwapPairToBSC(erc20Addr: Address): boolean {
    let result = super.call(
      "registerSwapPairToBSC",
      "registerSwapPairToBSC(address):(bool)",
      [ethereum.Value.fromAddress(erc20Addr)]
    );

    return result[0].toBoolean();
  }

  try_registerSwapPairToBSC(erc20Addr: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "registerSwapPairToBSC",
      "registerSwapPairToBSC(address):(bool)",
      [ethereum.Value.fromAddress(erc20Addr)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  registeredERC20(param0: Address): boolean {
    let result = super.call(
      "registeredERC20",
      "registeredERC20(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_registeredERC20(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "registeredERC20",
      "registeredERC20(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  swapFee(): BigInt {
    let result = super.call("swapFee", "swapFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_swapFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("swapFee", "swapFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class FillBSC2ETHSwapCall extends ethereum.Call {
  get inputs(): FillBSC2ETHSwapCall__Inputs {
    return new FillBSC2ETHSwapCall__Inputs(this);
  }

  get outputs(): FillBSC2ETHSwapCall__Outputs {
    return new FillBSC2ETHSwapCall__Outputs(this);
  }
}

export class FillBSC2ETHSwapCall__Inputs {
  _call: FillBSC2ETHSwapCall;

  constructor(call: FillBSC2ETHSwapCall) {
    this._call = call;
  }

  get bscTxHash(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get erc20Addr(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get toAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class FillBSC2ETHSwapCall__Outputs {
  _call: FillBSC2ETHSwapCall;

  constructor(call: FillBSC2ETHSwapCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get fee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get ownerAddr(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class RegisterSwapPairToBSCCall extends ethereum.Call {
  get inputs(): RegisterSwapPairToBSCCall__Inputs {
    return new RegisterSwapPairToBSCCall__Inputs(this);
  }

  get outputs(): RegisterSwapPairToBSCCall__Outputs {
    return new RegisterSwapPairToBSCCall__Outputs(this);
  }
}

export class RegisterSwapPairToBSCCall__Inputs {
  _call: RegisterSwapPairToBSCCall;

  constructor(call: RegisterSwapPairToBSCCall) {
    this._call = call;
  }

  get erc20Addr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RegisterSwapPairToBSCCall__Outputs {
  _call: RegisterSwapPairToBSCCall;

  constructor(call: RegisterSwapPairToBSCCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetSwapFeeCall extends ethereum.Call {
  get inputs(): SetSwapFeeCall__Inputs {
    return new SetSwapFeeCall__Inputs(this);
  }

  get outputs(): SetSwapFeeCall__Outputs {
    return new SetSwapFeeCall__Outputs(this);
  }
}

export class SetSwapFeeCall__Inputs {
  _call: SetSwapFeeCall;

  constructor(call: SetSwapFeeCall) {
    this._call = call;
  }

  get fee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetSwapFeeCall__Outputs {
  _call: SetSwapFeeCall;

  constructor(call: SetSwapFeeCall) {
    this._call = call;
  }
}

export class SwapETH2BSCCall extends ethereum.Call {
  get inputs(): SwapETH2BSCCall__Inputs {
    return new SwapETH2BSCCall__Inputs(this);
  }

  get outputs(): SwapETH2BSCCall__Outputs {
    return new SwapETH2BSCCall__Outputs(this);
  }
}

export class SwapETH2BSCCall__Inputs {
  _call: SwapETH2BSCCall;

  constructor(call: SwapETH2BSCCall) {
    this._call = call;
  }

  get erc20Addr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SwapETH2BSCCall__Outputs {
  _call: SwapETH2BSCCall;

  constructor(call: SwapETH2BSCCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
