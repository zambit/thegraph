// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ZamStacking__userInfoResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class ZamStacking extends ethereum.SmartContract {
  static bind(address: Address): ZamStacking {
    return new ZamStacking("ZamStacking", address);
  }

  FEE_DIVISOR(): BigInt {
    let result = super.call("FEE_DIVISOR", "FEE_DIVISOR():(uint256)", []);

    return result[0].toBigInt();
  }

  try_FEE_DIVISOR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("FEE_DIVISOR", "FEE_DIVISOR():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  PERCENT_DIVISOR(): BigInt {
    let result = super.call(
      "PERCENT_DIVISOR",
      "PERCENT_DIVISOR():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_PERCENT_DIVISOR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "PERCENT_DIVISOR",
      "PERCENT_DIVISOR():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  PERCENT_LIMIT(): BigInt {
    let result = super.call("PERCENT_LIMIT", "PERCENT_LIMIT():(uint256)", []);

    return result[0].toBigInt();
  }

  try_PERCENT_LIMIT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "PERCENT_LIMIT",
      "PERCENT_LIMIT():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  SECONDS_IN_YEAR(): BigInt {
    let result = super.call(
      "SECONDS_IN_YEAR",
      "SECONDS_IN_YEAR():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_SECONDS_IN_YEAR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "SECONDS_IN_YEAR",
      "SECONDS_IN_YEAR():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  S_DIVISOR(): BigInt {
    let result = super.call("S_DIVISOR", "S_DIVISOR():(uint256)", []);

    return result[0].toBigInt();
  }

  try_S_DIVISOR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("S_DIVISOR", "S_DIVISOR():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  fee(): BigInt {
    let result = super.call("fee", "fee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_fee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("fee", "fee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  feeReceiver(): Address {
    let result = super.call("feeReceiver", "feeReceiver():(address)", []);

    return result[0].toAddress();
  }

  try_feeReceiver(): ethereum.CallResult<Address> {
    let result = super.tryCall("feeReceiver", "feeReceiver():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  lastUpdateTimestamp(): BigInt {
    let result = super.call(
      "lastUpdateTimestamp",
      "lastUpdateTimestamp():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastUpdateTimestamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastUpdateTimestamp",
      "lastUpdateTimestamp():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pendingReward(_user: Address): BigInt {
    let result = super.call(
      "pendingReward",
      "pendingReward(address):(uint256)",
      [ethereum.Value.fromAddress(_user)]
    );

    return result[0].toBigInt();
  }

  try_pendingReward(_user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "pendingReward",
      "pendingReward(address):(uint256)",
      [ethereum.Value.fromAddress(_user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  percent(): BigInt {
    let result = super.call("percent", "percent():(uint256)", []);

    return result[0].toBigInt();
  }

  try_percent(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("percent", "percent():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  periodDuration(): BigInt {
    let result = super.call("periodDuration", "periodDuration():(uint256)", []);

    return result[0].toBigInt();
  }

  try_periodDuration(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "periodDuration",
      "periodDuration():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardClaimed(): BigInt {
    let result = super.call("rewardClaimed", "rewardClaimed():(uint256)", []);

    return result[0].toBigInt();
  }

  try_rewardClaimed(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardClaimed",
      "rewardClaimed():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardPeriod(): BigInt {
    let result = super.call("rewardPeriod", "rewardPeriod():(uint256)", []);

    return result[0].toBigInt();
  }

  try_rewardPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("rewardPeriod", "rewardPeriod():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardToken(): Address {
    let result = super.call("rewardToken", "rewardToken():(address)", []);

    return result[0].toAddress();
  }

  try_rewardToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("rewardToken", "rewardToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  s(): BigInt {
    let result = super.call("s", "s():(uint256)", []);

    return result[0].toBigInt();
  }

  try_s(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("s", "s():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakedToken(): Address {
    let result = super.call("stakedToken", "stakedToken():(address)", []);

    return result[0].toAddress();
  }

  try_stakedToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("stakedToken", "stakedToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalPassedTime(): BigInt {
    let result = super.call(
      "totalPassedTime",
      "totalPassedTime():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalPassedTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalPassedTime",
      "totalPassedTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalStake(): BigInt {
    let result = super.call("totalStake", "totalStake():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalStake(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalStake", "totalStake():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userInfo(param0: Address): ZamStacking__userInfoResult {
    let result = super.call("userInfo", "userInfo(address):(uint256,uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return new ZamStacking__userInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_userInfo(
    param0: Address
  ): ethereum.CallResult<ZamStacking__userInfoResult> {
    let result = super.tryCall(
      "userInfo",
      "userInfo(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ZamStacking__userInfoResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  vault(): Address {
    let result = super.call("vault", "vault():(address)", []);

    return result[0].toAddress();
  }

  try_vault(): ethereum.CallResult<Address> {
    let result = super.tryCall("vault", "vault():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _vault(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _stakedToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _rewardToken(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetFeeCall extends ethereum.Call {
  get inputs(): SetFeeCall__Inputs {
    return new SetFeeCall__Inputs(this);
  }

  get outputs(): SetFeeCall__Outputs {
    return new SetFeeCall__Outputs(this);
  }
}

export class SetFeeCall__Inputs {
  _call: SetFeeCall;

  constructor(call: SetFeeCall) {
    this._call = call;
  }

  get _fee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetFeeCall__Outputs {
  _call: SetFeeCall;

  constructor(call: SetFeeCall) {
    this._call = call;
  }
}

export class SetFeeReceiverCall extends ethereum.Call {
  get inputs(): SetFeeReceiverCall__Inputs {
    return new SetFeeReceiverCall__Inputs(this);
  }

  get outputs(): SetFeeReceiverCall__Outputs {
    return new SetFeeReceiverCall__Outputs(this);
  }
}

export class SetFeeReceiverCall__Inputs {
  _call: SetFeeReceiverCall;

  constructor(call: SetFeeReceiverCall) {
    this._call = call;
  }

  get _feeReceiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFeeReceiverCall__Outputs {
  _call: SetFeeReceiverCall;

  constructor(call: SetFeeReceiverCall) {
    this._call = call;
  }
}

export class SetVaultAddressCall extends ethereum.Call {
  get inputs(): SetVaultAddressCall__Inputs {
    return new SetVaultAddressCall__Inputs(this);
  }

  get outputs(): SetVaultAddressCall__Outputs {
    return new SetVaultAddressCall__Outputs(this);
  }
}

export class SetVaultAddressCall__Inputs {
  _call: SetVaultAddressCall;

  constructor(call: SetVaultAddressCall) {
    this._call = call;
  }

  get _vault(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetVaultAddressCall__Outputs {
  _call: SetVaultAddressCall;

  constructor(call: SetVaultAddressCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get _newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateStakeCall extends ethereum.Call {
  get inputs(): UpdateStakeCall__Inputs {
    return new UpdateStakeCall__Inputs(this);
  }

  get outputs(): UpdateStakeCall__Outputs {
    return new UpdateStakeCall__Outputs(this);
  }
}

export class UpdateStakeCall__Inputs {
  _call: UpdateStakeCall;

  constructor(call: UpdateStakeCall) {
    this._call = call;
  }

  get _rewardPeriod(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _periodDuration(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _beforeSwitch(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class UpdateStakeCall__Outputs {
  _call: UpdateStakeCall;

  constructor(call: UpdateStakeCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
