// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class TotalSupply extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("supply", Value.fromBigInt(BigInt.zero()));
    this.set("minted", Value.fromBigInt(BigInt.zero()));
    this.set("burned", Value.fromBigInt(BigInt.zero()));
    this.set("day", Value.fromBigInt(BigInt.zero()));
    this.set("week", Value.fromBigInt(BigInt.zero()));
    this.set("month", Value.fromBigInt(BigInt.zero()));
    this.set("year", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TotalSupply entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save TotalSupply entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("TotalSupply", id.toString(), this);
    }
  }

  static load(id: string): TotalSupply | null {
    return changetype<TotalSupply | null>(store.get("TotalSupply", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get supply(): BigInt {
    let value = this.get("supply");
    return value!.toBigInt();
  }

  set supply(value: BigInt) {
    this.set("supply", Value.fromBigInt(value));
  }

  get minted(): BigInt {
    let value = this.get("minted");
    return value!.toBigInt();
  }

  set minted(value: BigInt) {
    this.set("minted", Value.fromBigInt(value));
  }

  get burned(): BigInt {
    let value = this.get("burned");
    return value!.toBigInt();
  }

  set burned(value: BigInt) {
    this.set("burned", Value.fromBigInt(value));
  }

  get day(): BigInt {
    let value = this.get("day");
    return value!.toBigInt();
  }

  set day(value: BigInt) {
    this.set("day", Value.fromBigInt(value));
  }

  get week(): BigInt {
    let value = this.get("week");
    return value!.toBigInt();
  }

  set week(value: BigInt) {
    this.set("week", Value.fromBigInt(value));
  }

  get month(): BigInt {
    let value = this.get("month");
    return value!.toBigInt();
  }

  set month(value: BigInt) {
    this.set("month", Value.fromBigInt(value));
  }

  get year(): BigInt {
    let value = this.get("year");
    return value!.toBigInt();
  }

  set year(value: BigInt) {
    this.set("year", Value.fromBigInt(value));
  }
}

export class Circulation extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("circulation", Value.fromBigInt(BigInt.zero()));
    this.set("day", Value.fromBigInt(BigInt.zero()));
    this.set("week", Value.fromBigInt(BigInt.zero()));
    this.set("month", Value.fromBigInt(BigInt.zero()));
    this.set("year", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Circulation entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Circulation entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Circulation", id.toString(), this);
    }
  }

  static load(id: string): Circulation | null {
    return changetype<Circulation | null>(store.get("Circulation", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get circulation(): BigInt {
    let value = this.get("circulation");
    return value!.toBigInt();
  }

  set circulation(value: BigInt) {
    this.set("circulation", Value.fromBigInt(value));
  }

  get day(): BigInt {
    let value = this.get("day");
    return value!.toBigInt();
  }

  set day(value: BigInt) {
    this.set("day", Value.fromBigInt(value));
  }

  get week(): BigInt {
    let value = this.get("week");
    return value!.toBigInt();
  }

  set week(value: BigInt) {
    this.set("week", Value.fromBigInt(value));
  }

  get month(): BigInt {
    let value = this.get("month");
    return value!.toBigInt();
  }

  set month(value: BigInt) {
    this.set("month", Value.fromBigInt(value));
  }

  get year(): BigInt {
    let value = this.get("year");
    return value!.toBigInt();
  }

  set year(value: BigInt) {
    this.set("year", Value.fromBigInt(value));
  }
}

export class CirculationHourData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("circulation", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("hour", Value.fromBigInt(BigInt.zero()));
    this.set("day", Value.fromBigInt(BigInt.zero()));
    this.set("week", Value.fromBigInt(BigInt.zero()));
    this.set("month", Value.fromBigInt(BigInt.zero()));
    this.set("year", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CirculationHourData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save CirculationHourData entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("CirculationHourData", id.toString(), this);
    }
  }

  static load(id: string): CirculationHourData | null {
    return changetype<CirculationHourData | null>(
      store.get("CirculationHourData", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get circulation(): BigInt {
    let value = this.get("circulation");
    return value!.toBigInt();
  }

  set circulation(value: BigInt) {
    this.set("circulation", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get hour(): BigInt {
    let value = this.get("hour");
    return value!.toBigInt();
  }

  set hour(value: BigInt) {
    this.set("hour", Value.fromBigInt(value));
  }

  get day(): BigInt {
    let value = this.get("day");
    return value!.toBigInt();
  }

  set day(value: BigInt) {
    this.set("day", Value.fromBigInt(value));
  }

  get week(): BigInt {
    let value = this.get("week");
    return value!.toBigInt();
  }

  set week(value: BigInt) {
    this.set("week", Value.fromBigInt(value));
  }

  get month(): BigInt {
    let value = this.get("month");
    return value!.toBigInt();
  }

  set month(value: BigInt) {
    this.set("month", Value.fromBigInt(value));
  }

  get year(): BigInt {
    let value = this.get("year");
    return value!.toBigInt();
  }

  set year(value: BigInt) {
    this.set("year", Value.fromBigInt(value));
  }
}

export class CirculationDayData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("circulation", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("day", Value.fromBigInt(BigInt.zero()));
    this.set("week", Value.fromBigInt(BigInt.zero()));
    this.set("month", Value.fromBigInt(BigInt.zero()));
    this.set("year", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CirculationDayData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save CirculationDayData entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("CirculationDayData", id.toString(), this);
    }
  }

  static load(id: string): CirculationDayData | null {
    return changetype<CirculationDayData | null>(
      store.get("CirculationDayData", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get circulation(): BigInt {
    let value = this.get("circulation");
    return value!.toBigInt();
  }

  set circulation(value: BigInt) {
    this.set("circulation", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get day(): BigInt {
    let value = this.get("day");
    return value!.toBigInt();
  }

  set day(value: BigInt) {
    this.set("day", Value.fromBigInt(value));
  }

  get week(): BigInt {
    let value = this.get("week");
    return value!.toBigInt();
  }

  set week(value: BigInt) {
    this.set("week", Value.fromBigInt(value));
  }

  get month(): BigInt {
    let value = this.get("month");
    return value!.toBigInt();
  }

  set month(value: BigInt) {
    this.set("month", Value.fromBigInt(value));
  }

  get year(): BigInt {
    let value = this.get("year");
    return value!.toBigInt();
  }

  set year(value: BigInt) {
    this.set("year", Value.fromBigInt(value));
  }
}

export class CirculationWeekData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("circulation", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("week", Value.fromBigInt(BigInt.zero()));
    this.set("month", Value.fromBigInt(BigInt.zero()));
    this.set("year", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CirculationWeekData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save CirculationWeekData entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("CirculationWeekData", id.toString(), this);
    }
  }

  static load(id: string): CirculationWeekData | null {
    return changetype<CirculationWeekData | null>(
      store.get("CirculationWeekData", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get circulation(): BigInt {
    let value = this.get("circulation");
    return value!.toBigInt();
  }

  set circulation(value: BigInt) {
    this.set("circulation", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get week(): BigInt {
    let value = this.get("week");
    return value!.toBigInt();
  }

  set week(value: BigInt) {
    this.set("week", Value.fromBigInt(value));
  }

  get month(): BigInt {
    let value = this.get("month");
    return value!.toBigInt();
  }

  set month(value: BigInt) {
    this.set("month", Value.fromBigInt(value));
  }

  get year(): BigInt {
    let value = this.get("year");
    return value!.toBigInt();
  }

  set year(value: BigInt) {
    this.set("year", Value.fromBigInt(value));
  }
}

export class CirculationMonthData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("circulation", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("month", Value.fromBigInt(BigInt.zero()));
    this.set("year", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CirculationMonthData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save CirculationMonthData entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("CirculationMonthData", id.toString(), this);
    }
  }

  static load(id: string): CirculationMonthData | null {
    return changetype<CirculationMonthData | null>(
      store.get("CirculationMonthData", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get circulation(): BigInt {
    let value = this.get("circulation");
    return value!.toBigInt();
  }

  set circulation(value: BigInt) {
    this.set("circulation", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get month(): BigInt {
    let value = this.get("month");
    return value!.toBigInt();
  }

  set month(value: BigInt) {
    this.set("month", Value.fromBigInt(value));
  }

  get year(): BigInt {
    let value = this.get("year");
    return value!.toBigInt();
  }

  set year(value: BigInt) {
    this.set("year", Value.fromBigInt(value));
  }
}

export class Blocked extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("blocked", Value.fromBigInt(BigInt.zero()));
    this.set("day", Value.fromBigInt(BigInt.zero()));
    this.set("week", Value.fromBigInt(BigInt.zero()));
    this.set("month", Value.fromBigInt(BigInt.zero()));
    this.set("year", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Blocked entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Blocked entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Blocked", id.toString(), this);
    }
  }

  static load(id: string): Blocked | null {
    return changetype<Blocked | null>(store.get("Blocked", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blocked(): BigInt {
    let value = this.get("blocked");
    return value!.toBigInt();
  }

  set blocked(value: BigInt) {
    this.set("blocked", Value.fromBigInt(value));
  }

  get day(): BigInt {
    let value = this.get("day");
    return value!.toBigInt();
  }

  set day(value: BigInt) {
    this.set("day", Value.fromBigInt(value));
  }

  get week(): BigInt {
    let value = this.get("week");
    return value!.toBigInt();
  }

  set week(value: BigInt) {
    this.set("week", Value.fromBigInt(value));
  }

  get month(): BigInt {
    let value = this.get("month");
    return value!.toBigInt();
  }

  set month(value: BigInt) {
    this.set("month", Value.fromBigInt(value));
  }

  get year(): BigInt {
    let value = this.get("year");
    return value!.toBigInt();
  }

  set year(value: BigInt) {
    this.set("year", Value.fromBigInt(value));
  }
}

export class BlockedHourData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("blocked", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("hour", Value.fromBigInt(BigInt.zero()));
    this.set("day", Value.fromBigInt(BigInt.zero()));
    this.set("week", Value.fromBigInt(BigInt.zero()));
    this.set("month", Value.fromBigInt(BigInt.zero()));
    this.set("year", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BlockedHourData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save BlockedHourData entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("BlockedHourData", id.toString(), this);
    }
  }

  static load(id: string): BlockedHourData | null {
    return changetype<BlockedHourData | null>(store.get("BlockedHourData", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blocked(): BigInt {
    let value = this.get("blocked");
    return value!.toBigInt();
  }

  set blocked(value: BigInt) {
    this.set("blocked", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get hour(): BigInt {
    let value = this.get("hour");
    return value!.toBigInt();
  }

  set hour(value: BigInt) {
    this.set("hour", Value.fromBigInt(value));
  }

  get day(): BigInt {
    let value = this.get("day");
    return value!.toBigInt();
  }

  set day(value: BigInt) {
    this.set("day", Value.fromBigInt(value));
  }

  get week(): BigInt {
    let value = this.get("week");
    return value!.toBigInt();
  }

  set week(value: BigInt) {
    this.set("week", Value.fromBigInt(value));
  }

  get month(): BigInt {
    let value = this.get("month");
    return value!.toBigInt();
  }

  set month(value: BigInt) {
    this.set("month", Value.fromBigInt(value));
  }

  get year(): BigInt {
    let value = this.get("year");
    return value!.toBigInt();
  }

  set year(value: BigInt) {
    this.set("year", Value.fromBigInt(value));
  }
}

export class BlockedDayData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("blocked", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("day", Value.fromBigInt(BigInt.zero()));
    this.set("week", Value.fromBigInt(BigInt.zero()));
    this.set("month", Value.fromBigInt(BigInt.zero()));
    this.set("year", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BlockedDayData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save BlockedDayData entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("BlockedDayData", id.toString(), this);
    }
  }

  static load(id: string): BlockedDayData | null {
    return changetype<BlockedDayData | null>(store.get("BlockedDayData", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blocked(): BigInt {
    let value = this.get("blocked");
    return value!.toBigInt();
  }

  set blocked(value: BigInt) {
    this.set("blocked", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get day(): BigInt {
    let value = this.get("day");
    return value!.toBigInt();
  }

  set day(value: BigInt) {
    this.set("day", Value.fromBigInt(value));
  }

  get week(): BigInt {
    let value = this.get("week");
    return value!.toBigInt();
  }

  set week(value: BigInt) {
    this.set("week", Value.fromBigInt(value));
  }

  get month(): BigInt {
    let value = this.get("month");
    return value!.toBigInt();
  }

  set month(value: BigInt) {
    this.set("month", Value.fromBigInt(value));
  }

  get year(): BigInt {
    let value = this.get("year");
    return value!.toBigInt();
  }

  set year(value: BigInt) {
    this.set("year", Value.fromBigInt(value));
  }
}

export class BlockedWeekData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("blocked", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("week", Value.fromBigInt(BigInt.zero()));
    this.set("month", Value.fromBigInt(BigInt.zero()));
    this.set("year", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BlockedWeekData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save BlockedWeekData entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("BlockedWeekData", id.toString(), this);
    }
  }

  static load(id: string): BlockedWeekData | null {
    return changetype<BlockedWeekData | null>(store.get("BlockedWeekData", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blocked(): BigInt {
    let value = this.get("blocked");
    return value!.toBigInt();
  }

  set blocked(value: BigInt) {
    this.set("blocked", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get week(): BigInt {
    let value = this.get("week");
    return value!.toBigInt();
  }

  set week(value: BigInt) {
    this.set("week", Value.fromBigInt(value));
  }

  get month(): BigInt {
    let value = this.get("month");
    return value!.toBigInt();
  }

  set month(value: BigInt) {
    this.set("month", Value.fromBigInt(value));
  }

  get year(): BigInt {
    let value = this.get("year");
    return value!.toBigInt();
  }

  set year(value: BigInt) {
    this.set("year", Value.fromBigInt(value));
  }
}

export class BlockedMonthData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("blocked", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("month", Value.fromBigInt(BigInt.zero()));
    this.set("year", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BlockedMonthData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save BlockedMonthData entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("BlockedMonthData", id.toString(), this);
    }
  }

  static load(id: string): BlockedMonthData | null {
    return changetype<BlockedMonthData | null>(
      store.get("BlockedMonthData", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blocked(): BigInt {
    let value = this.get("blocked");
    return value!.toBigInt();
  }

  set blocked(value: BigInt) {
    this.set("blocked", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get month(): BigInt {
    let value = this.get("month");
    return value!.toBigInt();
  }

  set month(value: BigInt) {
    this.set("month", Value.fromBigInt(value));
  }

  get year(): BigInt {
    let value = this.get("year");
    return value!.toBigInt();
  }

  set year(value: BigInt) {
    this.set("year", Value.fromBigInt(value));
  }
}

export class TransferCount extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("count", Value.fromI32(0));
    this.set("totalTransferred", Value.fromBigInt(BigInt.zero()));
    this.set("day", Value.fromBigInt(BigInt.zero()));
    this.set("week", Value.fromBigInt(BigInt.zero()));
    this.set("month", Value.fromBigInt(BigInt.zero()));
    this.set("year", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TransferCount entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save TransferCount entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("TransferCount", id.toString(), this);
    }
  }

  static load(id: string): TransferCount | null {
    return changetype<TransferCount | null>(store.get("TransferCount", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): i32 {
    let value = this.get("count");
    return value!.toI32();
  }

  set count(value: i32) {
    this.set("count", Value.fromI32(value));
  }

  get totalTransferred(): BigInt {
    let value = this.get("totalTransferred");
    return value!.toBigInt();
  }

  set totalTransferred(value: BigInt) {
    this.set("totalTransferred", Value.fromBigInt(value));
  }

  get day(): BigInt {
    let value = this.get("day");
    return value!.toBigInt();
  }

  set day(value: BigInt) {
    this.set("day", Value.fromBigInt(value));
  }

  get week(): BigInt {
    let value = this.get("week");
    return value!.toBigInt();
  }

  set week(value: BigInt) {
    this.set("week", Value.fromBigInt(value));
  }

  get month(): BigInt {
    let value = this.get("month");
    return value!.toBigInt();
  }

  set month(value: BigInt) {
    this.set("month", Value.fromBigInt(value));
  }

  get year(): BigInt {
    let value = this.get("year");
    return value!.toBigInt();
  }

  set year(value: BigInt) {
    this.set("year", Value.fromBigInt(value));
  }
}

export class TransferHourData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("count", Value.fromI32(0));
    this.set("totalCount", Value.fromBigInt(BigInt.zero()));
    this.set("transferred", Value.fromBigInt(BigInt.zero()));
    this.set("totalTransferred", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("hour", Value.fromBigInt(BigInt.zero()));
    this.set("day", Value.fromBigInt(BigInt.zero()));
    this.set("week", Value.fromBigInt(BigInt.zero()));
    this.set("month", Value.fromBigInt(BigInt.zero()));
    this.set("year", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TransferHourData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save TransferHourData entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("TransferHourData", id.toString(), this);
    }
  }

  static load(id: string): TransferHourData | null {
    return changetype<TransferHourData | null>(
      store.get("TransferHourData", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): i32 {
    let value = this.get("count");
    return value!.toI32();
  }

  set count(value: i32) {
    this.set("count", Value.fromI32(value));
  }

  get totalCount(): BigInt {
    let value = this.get("totalCount");
    return value!.toBigInt();
  }

  set totalCount(value: BigInt) {
    this.set("totalCount", Value.fromBigInt(value));
  }

  get transferred(): BigInt {
    let value = this.get("transferred");
    return value!.toBigInt();
  }

  set transferred(value: BigInt) {
    this.set("transferred", Value.fromBigInt(value));
  }

  get totalTransferred(): BigInt {
    let value = this.get("totalTransferred");
    return value!.toBigInt();
  }

  set totalTransferred(value: BigInt) {
    this.set("totalTransferred", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get hour(): BigInt {
    let value = this.get("hour");
    return value!.toBigInt();
  }

  set hour(value: BigInt) {
    this.set("hour", Value.fromBigInt(value));
  }

  get day(): BigInt {
    let value = this.get("day");
    return value!.toBigInt();
  }

  set day(value: BigInt) {
    this.set("day", Value.fromBigInt(value));
  }

  get week(): BigInt {
    let value = this.get("week");
    return value!.toBigInt();
  }

  set week(value: BigInt) {
    this.set("week", Value.fromBigInt(value));
  }

  get month(): BigInt {
    let value = this.get("month");
    return value!.toBigInt();
  }

  set month(value: BigInt) {
    this.set("month", Value.fromBigInt(value));
  }

  get year(): BigInt {
    let value = this.get("year");
    return value!.toBigInt();
  }

  set year(value: BigInt) {
    this.set("year", Value.fromBigInt(value));
  }
}

export class TransferDayData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("count", Value.fromI32(0));
    this.set("totalCount", Value.fromBigInt(BigInt.zero()));
    this.set("transferred", Value.fromBigInt(BigInt.zero()));
    this.set("totalTransferred", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("day", Value.fromBigInt(BigInt.zero()));
    this.set("week", Value.fromBigInt(BigInt.zero()));
    this.set("month", Value.fromBigInt(BigInt.zero()));
    this.set("year", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TransferDayData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save TransferDayData entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("TransferDayData", id.toString(), this);
    }
  }

  static load(id: string): TransferDayData | null {
    return changetype<TransferDayData | null>(store.get("TransferDayData", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): i32 {
    let value = this.get("count");
    return value!.toI32();
  }

  set count(value: i32) {
    this.set("count", Value.fromI32(value));
  }

  get totalCount(): BigInt {
    let value = this.get("totalCount");
    return value!.toBigInt();
  }

  set totalCount(value: BigInt) {
    this.set("totalCount", Value.fromBigInt(value));
  }

  get transferred(): BigInt {
    let value = this.get("transferred");
    return value!.toBigInt();
  }

  set transferred(value: BigInt) {
    this.set("transferred", Value.fromBigInt(value));
  }

  get totalTransferred(): BigInt {
    let value = this.get("totalTransferred");
    return value!.toBigInt();
  }

  set totalTransferred(value: BigInt) {
    this.set("totalTransferred", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get day(): BigInt {
    let value = this.get("day");
    return value!.toBigInt();
  }

  set day(value: BigInt) {
    this.set("day", Value.fromBigInt(value));
  }

  get week(): BigInt {
    let value = this.get("week");
    return value!.toBigInt();
  }

  set week(value: BigInt) {
    this.set("week", Value.fromBigInt(value));
  }

  get month(): BigInt {
    let value = this.get("month");
    return value!.toBigInt();
  }

  set month(value: BigInt) {
    this.set("month", Value.fromBigInt(value));
  }

  get year(): BigInt {
    let value = this.get("year");
    return value!.toBigInt();
  }

  set year(value: BigInt) {
    this.set("year", Value.fromBigInt(value));
  }
}

export class TransferWeekData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("count", Value.fromI32(0));
    this.set("totalCount", Value.fromBigInt(BigInt.zero()));
    this.set("transferred", Value.fromBigInt(BigInt.zero()));
    this.set("totalTransferred", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("week", Value.fromBigInt(BigInt.zero()));
    this.set("month", Value.fromBigInt(BigInt.zero()));
    this.set("year", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TransferWeekData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save TransferWeekData entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("TransferWeekData", id.toString(), this);
    }
  }

  static load(id: string): TransferWeekData | null {
    return changetype<TransferWeekData | null>(
      store.get("TransferWeekData", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): i32 {
    let value = this.get("count");
    return value!.toI32();
  }

  set count(value: i32) {
    this.set("count", Value.fromI32(value));
  }

  get totalCount(): BigInt {
    let value = this.get("totalCount");
    return value!.toBigInt();
  }

  set totalCount(value: BigInt) {
    this.set("totalCount", Value.fromBigInt(value));
  }

  get transferred(): BigInt {
    let value = this.get("transferred");
    return value!.toBigInt();
  }

  set transferred(value: BigInt) {
    this.set("transferred", Value.fromBigInt(value));
  }

  get totalTransferred(): BigInt {
    let value = this.get("totalTransferred");
    return value!.toBigInt();
  }

  set totalTransferred(value: BigInt) {
    this.set("totalTransferred", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get week(): BigInt {
    let value = this.get("week");
    return value!.toBigInt();
  }

  set week(value: BigInt) {
    this.set("week", Value.fromBigInt(value));
  }

  get month(): BigInt {
    let value = this.get("month");
    return value!.toBigInt();
  }

  set month(value: BigInt) {
    this.set("month", Value.fromBigInt(value));
  }

  get year(): BigInt {
    let value = this.get("year");
    return value!.toBigInt();
  }

  set year(value: BigInt) {
    this.set("year", Value.fromBigInt(value));
  }
}

export class TransferMonthData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("count", Value.fromI32(0));
    this.set("totalCount", Value.fromBigInt(BigInt.zero()));
    this.set("transferred", Value.fromBigInt(BigInt.zero()));
    this.set("totalTransferred", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("month", Value.fromBigInt(BigInt.zero()));
    this.set("year", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TransferMonthData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save TransferMonthData entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("TransferMonthData", id.toString(), this);
    }
  }

  static load(id: string): TransferMonthData | null {
    return changetype<TransferMonthData | null>(
      store.get("TransferMonthData", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): i32 {
    let value = this.get("count");
    return value!.toI32();
  }

  set count(value: i32) {
    this.set("count", Value.fromI32(value));
  }

  get totalCount(): BigInt {
    let value = this.get("totalCount");
    return value!.toBigInt();
  }

  set totalCount(value: BigInt) {
    this.set("totalCount", Value.fromBigInt(value));
  }

  get transferred(): BigInt {
    let value = this.get("transferred");
    return value!.toBigInt();
  }

  set transferred(value: BigInt) {
    this.set("transferred", Value.fromBigInt(value));
  }

  get totalTransferred(): BigInt {
    let value = this.get("totalTransferred");
    return value!.toBigInt();
  }

  set totalTransferred(value: BigInt) {
    this.set("totalTransferred", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get month(): BigInt {
    let value = this.get("month");
    return value!.toBigInt();
  }

  set month(value: BigInt) {
    this.set("month", Value.fromBigInt(value));
  }

  get year(): BigInt {
    let value = this.get("year");
    return value!.toBigInt();
  }

  set year(value: BigInt) {
    this.set("year", Value.fromBigInt(value));
  }
}

export class TransactionCount extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("count", Value.fromI32(0));
    this.set("day", Value.fromBigInt(BigInt.zero()));
    this.set("week", Value.fromBigInt(BigInt.zero()));
    this.set("month", Value.fromBigInt(BigInt.zero()));
    this.set("year", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TransactionCount entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save TransactionCount entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("TransactionCount", id.toString(), this);
    }
  }

  static load(id: string): TransactionCount | null {
    return changetype<TransactionCount | null>(
      store.get("TransactionCount", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): i32 {
    let value = this.get("count");
    return value!.toI32();
  }

  set count(value: i32) {
    this.set("count", Value.fromI32(value));
  }

  get day(): BigInt {
    let value = this.get("day");
    return value!.toBigInt();
  }

  set day(value: BigInt) {
    this.set("day", Value.fromBigInt(value));
  }

  get week(): BigInt {
    let value = this.get("week");
    return value!.toBigInt();
  }

  set week(value: BigInt) {
    this.set("week", Value.fromBigInt(value));
  }

  get month(): BigInt {
    let value = this.get("month");
    return value!.toBigInt();
  }

  set month(value: BigInt) {
    this.set("month", Value.fromBigInt(value));
  }

  get year(): BigInt {
    let value = this.get("year");
    return value!.toBigInt();
  }

  set year(value: BigInt) {
    this.set("year", Value.fromBigInt(value));
  }
}

export class TransactionHourCount extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("count", Value.fromI32(0));
    this.set("totalCount", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("hour", Value.fromBigInt(BigInt.zero()));
    this.set("day", Value.fromBigInt(BigInt.zero()));
    this.set("week", Value.fromBigInt(BigInt.zero()));
    this.set("month", Value.fromBigInt(BigInt.zero()));
    this.set("year", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TransactionHourCount entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save TransactionHourCount entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("TransactionHourCount", id.toString(), this);
    }
  }

  static load(id: string): TransactionHourCount | null {
    return changetype<TransactionHourCount | null>(
      store.get("TransactionHourCount", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): i32 {
    let value = this.get("count");
    return value!.toI32();
  }

  set count(value: i32) {
    this.set("count", Value.fromI32(value));
  }

  get totalCount(): BigInt {
    let value = this.get("totalCount");
    return value!.toBigInt();
  }

  set totalCount(value: BigInt) {
    this.set("totalCount", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get hour(): BigInt {
    let value = this.get("hour");
    return value!.toBigInt();
  }

  set hour(value: BigInt) {
    this.set("hour", Value.fromBigInt(value));
  }

  get day(): BigInt {
    let value = this.get("day");
    return value!.toBigInt();
  }

  set day(value: BigInt) {
    this.set("day", Value.fromBigInt(value));
  }

  get week(): BigInt {
    let value = this.get("week");
    return value!.toBigInt();
  }

  set week(value: BigInt) {
    this.set("week", Value.fromBigInt(value));
  }

  get month(): BigInt {
    let value = this.get("month");
    return value!.toBigInt();
  }

  set month(value: BigInt) {
    this.set("month", Value.fromBigInt(value));
  }

  get year(): BigInt {
    let value = this.get("year");
    return value!.toBigInt();
  }

  set year(value: BigInt) {
    this.set("year", Value.fromBigInt(value));
  }
}

export class TransactionDayCount extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("count", Value.fromI32(0));
    this.set("totalCount", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("day", Value.fromBigInt(BigInt.zero()));
    this.set("week", Value.fromBigInt(BigInt.zero()));
    this.set("month", Value.fromBigInt(BigInt.zero()));
    this.set("year", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TransactionDayCount entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save TransactionDayCount entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("TransactionDayCount", id.toString(), this);
    }
  }

  static load(id: string): TransactionDayCount | null {
    return changetype<TransactionDayCount | null>(
      store.get("TransactionDayCount", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): i32 {
    let value = this.get("count");
    return value!.toI32();
  }

  set count(value: i32) {
    this.set("count", Value.fromI32(value));
  }

  get totalCount(): BigInt {
    let value = this.get("totalCount");
    return value!.toBigInt();
  }

  set totalCount(value: BigInt) {
    this.set("totalCount", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get day(): BigInt {
    let value = this.get("day");
    return value!.toBigInt();
  }

  set day(value: BigInt) {
    this.set("day", Value.fromBigInt(value));
  }

  get week(): BigInt {
    let value = this.get("week");
    return value!.toBigInt();
  }

  set week(value: BigInt) {
    this.set("week", Value.fromBigInt(value));
  }

  get month(): BigInt {
    let value = this.get("month");
    return value!.toBigInt();
  }

  set month(value: BigInt) {
    this.set("month", Value.fromBigInt(value));
  }

  get year(): BigInt {
    let value = this.get("year");
    return value!.toBigInt();
  }

  set year(value: BigInt) {
    this.set("year", Value.fromBigInt(value));
  }
}

export class TransactionWeekCount extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("count", Value.fromI32(0));
    this.set("totalCount", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("week", Value.fromBigInt(BigInt.zero()));
    this.set("month", Value.fromBigInt(BigInt.zero()));
    this.set("year", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TransactionWeekCount entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save TransactionWeekCount entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("TransactionWeekCount", id.toString(), this);
    }
  }

  static load(id: string): TransactionWeekCount | null {
    return changetype<TransactionWeekCount | null>(
      store.get("TransactionWeekCount", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): i32 {
    let value = this.get("count");
    return value!.toI32();
  }

  set count(value: i32) {
    this.set("count", Value.fromI32(value));
  }

  get totalCount(): BigInt {
    let value = this.get("totalCount");
    return value!.toBigInt();
  }

  set totalCount(value: BigInt) {
    this.set("totalCount", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get week(): BigInt {
    let value = this.get("week");
    return value!.toBigInt();
  }

  set week(value: BigInt) {
    this.set("week", Value.fromBigInt(value));
  }

  get month(): BigInt {
    let value = this.get("month");
    return value!.toBigInt();
  }

  set month(value: BigInt) {
    this.set("month", Value.fromBigInt(value));
  }

  get year(): BigInt {
    let value = this.get("year");
    return value!.toBigInt();
  }

  set year(value: BigInt) {
    this.set("year", Value.fromBigInt(value));
  }
}

export class TransactionMonthCount extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("count", Value.fromI32(0));
    this.set("totalCount", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("month", Value.fromBigInt(BigInt.zero()));
    this.set("year", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save TransactionMonthCount entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save TransactionMonthCount entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("TransactionMonthCount", id.toString(), this);
    }
  }

  static load(id: string): TransactionMonthCount | null {
    return changetype<TransactionMonthCount | null>(
      store.get("TransactionMonthCount", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): i32 {
    let value = this.get("count");
    return value!.toI32();
  }

  set count(value: i32) {
    this.set("count", Value.fromI32(value));
  }

  get totalCount(): BigInt {
    let value = this.get("totalCount");
    return value!.toBigInt();
  }

  set totalCount(value: BigInt) {
    this.set("totalCount", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get month(): BigInt {
    let value = this.get("month");
    return value!.toBigInt();
  }

  set month(value: BigInt) {
    this.set("month", Value.fromBigInt(value));
  }

  get year(): BigInt {
    let value = this.get("year");
    return value!.toBigInt();
  }

  set year(value: BigInt) {
    this.set("year", Value.fromBigInt(value));
  }
}

export class Holder extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("address", Value.fromString(""));
    this.set("balance", Value.fromBigInt(BigInt.zero()));
    this.set("transactionCount", Value.fromI32(0));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Holder entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Holder entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Holder", id.toString(), this);
    }
  }

  static load(id: string): Holder | null {
    return changetype<Holder | null>(store.get("Holder", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): string {
    let value = this.get("address");
    return value!.toString();
  }

  set address(value: string) {
    this.set("address", Value.fromString(value));
  }

  get balance(): BigInt {
    let value = this.get("balance");
    return value!.toBigInt();
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }

  get transactionCount(): i32 {
    let value = this.get("transactionCount");
    return value!.toI32();
  }

  set transactionCount(value: i32) {
    this.set("transactionCount", Value.fromI32(value));
  }
}

export class HolderCount extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("count", Value.fromI32(0));
    this.set("day", Value.fromBigInt(BigInt.zero()));
    this.set("week", Value.fromBigInt(BigInt.zero()));
    this.set("month", Value.fromBigInt(BigInt.zero()));
    this.set("year", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save HolderCount entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save HolderCount entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("HolderCount", id.toString(), this);
    }
  }

  static load(id: string): HolderCount | null {
    return changetype<HolderCount | null>(store.get("HolderCount", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): i32 {
    let value = this.get("count");
    return value!.toI32();
  }

  set count(value: i32) {
    this.set("count", Value.fromI32(value));
  }

  get day(): BigInt {
    let value = this.get("day");
    return value!.toBigInt();
  }

  set day(value: BigInt) {
    this.set("day", Value.fromBigInt(value));
  }

  get week(): BigInt {
    let value = this.get("week");
    return value!.toBigInt();
  }

  set week(value: BigInt) {
    this.set("week", Value.fromBigInt(value));
  }

  get month(): BigInt {
    let value = this.get("month");
    return value!.toBigInt();
  }

  set month(value: BigInt) {
    this.set("month", Value.fromBigInt(value));
  }

  get year(): BigInt {
    let value = this.get("year");
    return value!.toBigInt();
  }

  set year(value: BigInt) {
    this.set("year", Value.fromBigInt(value));
  }
}

export class HolderHourCount extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("totalCount", Value.fromI32(0));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("hour", Value.fromBigInt(BigInt.zero()));
    this.set("day", Value.fromBigInt(BigInt.zero()));
    this.set("week", Value.fromBigInt(BigInt.zero()));
    this.set("month", Value.fromBigInt(BigInt.zero()));
    this.set("year", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save HolderHourCount entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save HolderHourCount entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("HolderHourCount", id.toString(), this);
    }
  }

  static load(id: string): HolderHourCount | null {
    return changetype<HolderHourCount | null>(store.get("HolderHourCount", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalCount(): i32 {
    let value = this.get("totalCount");
    return value!.toI32();
  }

  set totalCount(value: i32) {
    this.set("totalCount", Value.fromI32(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get hour(): BigInt {
    let value = this.get("hour");
    return value!.toBigInt();
  }

  set hour(value: BigInt) {
    this.set("hour", Value.fromBigInt(value));
  }

  get day(): BigInt {
    let value = this.get("day");
    return value!.toBigInt();
  }

  set day(value: BigInt) {
    this.set("day", Value.fromBigInt(value));
  }

  get week(): BigInt {
    let value = this.get("week");
    return value!.toBigInt();
  }

  set week(value: BigInt) {
    this.set("week", Value.fromBigInt(value));
  }

  get month(): BigInt {
    let value = this.get("month");
    return value!.toBigInt();
  }

  set month(value: BigInt) {
    this.set("month", Value.fromBigInt(value));
  }

  get year(): BigInt {
    let value = this.get("year");
    return value!.toBigInt();
  }

  set year(value: BigInt) {
    this.set("year", Value.fromBigInt(value));
  }
}

export class HolderDayCount extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("totalCount", Value.fromI32(0));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("day", Value.fromBigInt(BigInt.zero()));
    this.set("week", Value.fromBigInt(BigInt.zero()));
    this.set("month", Value.fromBigInt(BigInt.zero()));
    this.set("year", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save HolderDayCount entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save HolderDayCount entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("HolderDayCount", id.toString(), this);
    }
  }

  static load(id: string): HolderDayCount | null {
    return changetype<HolderDayCount | null>(store.get("HolderDayCount", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalCount(): i32 {
    let value = this.get("totalCount");
    return value!.toI32();
  }

  set totalCount(value: i32) {
    this.set("totalCount", Value.fromI32(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get day(): BigInt {
    let value = this.get("day");
    return value!.toBigInt();
  }

  set day(value: BigInt) {
    this.set("day", Value.fromBigInt(value));
  }

  get week(): BigInt {
    let value = this.get("week");
    return value!.toBigInt();
  }

  set week(value: BigInt) {
    this.set("week", Value.fromBigInt(value));
  }

  get month(): BigInt {
    let value = this.get("month");
    return value!.toBigInt();
  }

  set month(value: BigInt) {
    this.set("month", Value.fromBigInt(value));
  }

  get year(): BigInt {
    let value = this.get("year");
    return value!.toBigInt();
  }

  set year(value: BigInt) {
    this.set("year", Value.fromBigInt(value));
  }
}

export class HolderWeekCount extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("totalCount", Value.fromI32(0));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("week", Value.fromBigInt(BigInt.zero()));
    this.set("month", Value.fromBigInt(BigInt.zero()));
    this.set("year", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save HolderWeekCount entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save HolderWeekCount entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("HolderWeekCount", id.toString(), this);
    }
  }

  static load(id: string): HolderWeekCount | null {
    return changetype<HolderWeekCount | null>(store.get("HolderWeekCount", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalCount(): i32 {
    let value = this.get("totalCount");
    return value!.toI32();
  }

  set totalCount(value: i32) {
    this.set("totalCount", Value.fromI32(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get week(): BigInt {
    let value = this.get("week");
    return value!.toBigInt();
  }

  set week(value: BigInt) {
    this.set("week", Value.fromBigInt(value));
  }

  get month(): BigInt {
    let value = this.get("month");
    return value!.toBigInt();
  }

  set month(value: BigInt) {
    this.set("month", Value.fromBigInt(value));
  }

  get year(): BigInt {
    let value = this.get("year");
    return value!.toBigInt();
  }

  set year(value: BigInt) {
    this.set("year", Value.fromBigInt(value));
  }
}

export class HolderMonthCount extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("totalCount", Value.fromI32(0));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("month", Value.fromBigInt(BigInt.zero()));
    this.set("year", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save HolderMonthCount entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save HolderMonthCount entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("HolderMonthCount", id.toString(), this);
    }
  }

  static load(id: string): HolderMonthCount | null {
    return changetype<HolderMonthCount | null>(
      store.get("HolderMonthCount", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalCount(): i32 {
    let value = this.get("totalCount");
    return value!.toI32();
  }

  set totalCount(value: i32) {
    this.set("totalCount", Value.fromI32(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get month(): BigInt {
    let value = this.get("month");
    return value!.toBigInt();
  }

  set month(value: BigInt) {
    this.set("month", Value.fromBigInt(value));
  }

  get year(): BigInt {
    let value = this.get("year");
    return value!.toBigInt();
  }

  set year(value: BigInt) {
    this.set("year", Value.fromBigInt(value));
  }
}

export class Participant extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("address", Value.fromString(""));
    this.set("transactionCount", Value.fromI32(0));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Participant entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Participant entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Participant", id.toString(), this);
    }
  }

  static load(id: string): Participant | null {
    return changetype<Participant | null>(store.get("Participant", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): string {
    let value = this.get("address");
    return value!.toString();
  }

  set address(value: string) {
    this.set("address", Value.fromString(value));
  }

  get transactionCount(): i32 {
    let value = this.get("transactionCount");
    return value!.toI32();
  }

  set transactionCount(value: i32) {
    this.set("transactionCount", Value.fromI32(value));
  }
}

export class ParticipantCount extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("count", Value.fromI32(0));
    this.set("day", Value.fromBigInt(BigInt.zero()));
    this.set("week", Value.fromBigInt(BigInt.zero()));
    this.set("month", Value.fromBigInt(BigInt.zero()));
    this.set("year", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ParticipantCount entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ParticipantCount entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ParticipantCount", id.toString(), this);
    }
  }

  static load(id: string): ParticipantCount | null {
    return changetype<ParticipantCount | null>(
      store.get("ParticipantCount", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): i32 {
    let value = this.get("count");
    return value!.toI32();
  }

  set count(value: i32) {
    this.set("count", Value.fromI32(value));
  }

  get day(): BigInt {
    let value = this.get("day");
    return value!.toBigInt();
  }

  set day(value: BigInt) {
    this.set("day", Value.fromBigInt(value));
  }

  get week(): BigInt {
    let value = this.get("week");
    return value!.toBigInt();
  }

  set week(value: BigInt) {
    this.set("week", Value.fromBigInt(value));
  }

  get month(): BigInt {
    let value = this.get("month");
    return value!.toBigInt();
  }

  set month(value: BigInt) {
    this.set("month", Value.fromBigInt(value));
  }

  get year(): BigInt {
    let value = this.get("year");
    return value!.toBigInt();
  }

  set year(value: BigInt) {
    this.set("year", Value.fromBigInt(value));
  }
}

export class ParticipantHourCount extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("totalCount", Value.fromI32(0));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("hour", Value.fromBigInt(BigInt.zero()));
    this.set("day", Value.fromBigInt(BigInt.zero()));
    this.set("week", Value.fromBigInt(BigInt.zero()));
    this.set("month", Value.fromBigInt(BigInt.zero()));
    this.set("year", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ParticipantHourCount entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ParticipantHourCount entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ParticipantHourCount", id.toString(), this);
    }
  }

  static load(id: string): ParticipantHourCount | null {
    return changetype<ParticipantHourCount | null>(
      store.get("ParticipantHourCount", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalCount(): i32 {
    let value = this.get("totalCount");
    return value!.toI32();
  }

  set totalCount(value: i32) {
    this.set("totalCount", Value.fromI32(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get hour(): BigInt {
    let value = this.get("hour");
    return value!.toBigInt();
  }

  set hour(value: BigInt) {
    this.set("hour", Value.fromBigInt(value));
  }

  get day(): BigInt {
    let value = this.get("day");
    return value!.toBigInt();
  }

  set day(value: BigInt) {
    this.set("day", Value.fromBigInt(value));
  }

  get week(): BigInt {
    let value = this.get("week");
    return value!.toBigInt();
  }

  set week(value: BigInt) {
    this.set("week", Value.fromBigInt(value));
  }

  get month(): BigInt {
    let value = this.get("month");
    return value!.toBigInt();
  }

  set month(value: BigInt) {
    this.set("month", Value.fromBigInt(value));
  }

  get year(): BigInt {
    let value = this.get("year");
    return value!.toBigInt();
  }

  set year(value: BigInt) {
    this.set("year", Value.fromBigInt(value));
  }
}

export class ParticipantDayCount extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("totalCount", Value.fromI32(0));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("day", Value.fromBigInt(BigInt.zero()));
    this.set("week", Value.fromBigInt(BigInt.zero()));
    this.set("month", Value.fromBigInt(BigInt.zero()));
    this.set("year", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ParticipantDayCount entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ParticipantDayCount entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ParticipantDayCount", id.toString(), this);
    }
  }

  static load(id: string): ParticipantDayCount | null {
    return changetype<ParticipantDayCount | null>(
      store.get("ParticipantDayCount", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalCount(): i32 {
    let value = this.get("totalCount");
    return value!.toI32();
  }

  set totalCount(value: i32) {
    this.set("totalCount", Value.fromI32(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get day(): BigInt {
    let value = this.get("day");
    return value!.toBigInt();
  }

  set day(value: BigInt) {
    this.set("day", Value.fromBigInt(value));
  }

  get week(): BigInt {
    let value = this.get("week");
    return value!.toBigInt();
  }

  set week(value: BigInt) {
    this.set("week", Value.fromBigInt(value));
  }

  get month(): BigInt {
    let value = this.get("month");
    return value!.toBigInt();
  }

  set month(value: BigInt) {
    this.set("month", Value.fromBigInt(value));
  }

  get year(): BigInt {
    let value = this.get("year");
    return value!.toBigInt();
  }

  set year(value: BigInt) {
    this.set("year", Value.fromBigInt(value));
  }
}

export class ParticipantWeekCount extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("totalCount", Value.fromI32(0));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("week", Value.fromBigInt(BigInt.zero()));
    this.set("month", Value.fromBigInt(BigInt.zero()));
    this.set("year", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ParticipantWeekCount entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ParticipantWeekCount entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ParticipantWeekCount", id.toString(), this);
    }
  }

  static load(id: string): ParticipantWeekCount | null {
    return changetype<ParticipantWeekCount | null>(
      store.get("ParticipantWeekCount", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalCount(): i32 {
    let value = this.get("totalCount");
    return value!.toI32();
  }

  set totalCount(value: i32) {
    this.set("totalCount", Value.fromI32(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get week(): BigInt {
    let value = this.get("week");
    return value!.toBigInt();
  }

  set week(value: BigInt) {
    this.set("week", Value.fromBigInt(value));
  }

  get month(): BigInt {
    let value = this.get("month");
    return value!.toBigInt();
  }

  set month(value: BigInt) {
    this.set("month", Value.fromBigInt(value));
  }

  get year(): BigInt {
    let value = this.get("year");
    return value!.toBigInt();
  }

  set year(value: BigInt) {
    this.set("year", Value.fromBigInt(value));
  }
}

export class ParticipantMonthCount extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("totalCount", Value.fromI32(0));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("month", Value.fromBigInt(BigInt.zero()));
    this.set("year", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ParticipantMonthCount entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ParticipantMonthCount entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ParticipantMonthCount", id.toString(), this);
    }
  }

  static load(id: string): ParticipantMonthCount | null {
    return changetype<ParticipantMonthCount | null>(
      store.get("ParticipantMonthCount", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalCount(): i32 {
    let value = this.get("totalCount");
    return value!.toI32();
  }

  set totalCount(value: i32) {
    this.set("totalCount", Value.fromI32(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get month(): BigInt {
    let value = this.get("month");
    return value!.toBigInt();
  }

  set month(value: BigInt) {
    this.set("month", Value.fromBigInt(value));
  }

  get year(): BigInt {
    let value = this.get("year");
    return value!.toBigInt();
  }

  set year(value: BigInt) {
    this.set("year", Value.fromBigInt(value));
  }
}

export class BridgeBSC extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("transferredToBSC", Value.fromBigInt(BigInt.zero()));
    this.set("day", Value.fromBigInt(BigInt.zero()));
    this.set("week", Value.fromBigInt(BigInt.zero()));
    this.set("month", Value.fromBigInt(BigInt.zero()));
    this.set("year", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BridgeBSC entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save BridgeBSC entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("BridgeBSC", id.toString(), this);
    }
  }

  static load(id: string): BridgeBSC | null {
    return changetype<BridgeBSC | null>(store.get("BridgeBSC", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transferredToBSC(): BigInt {
    let value = this.get("transferredToBSC");
    return value!.toBigInt();
  }

  set transferredToBSC(value: BigInt) {
    this.set("transferredToBSC", Value.fromBigInt(value));
  }

  get day(): BigInt {
    let value = this.get("day");
    return value!.toBigInt();
  }

  set day(value: BigInt) {
    this.set("day", Value.fromBigInt(value));
  }

  get week(): BigInt {
    let value = this.get("week");
    return value!.toBigInt();
  }

  set week(value: BigInt) {
    this.set("week", Value.fromBigInt(value));
  }

  get month(): BigInt {
    let value = this.get("month");
    return value!.toBigInt();
  }

  set month(value: BigInt) {
    this.set("month", Value.fromBigInt(value));
  }

  get year(): BigInt {
    let value = this.get("year");
    return value!.toBigInt();
  }

  set year(value: BigInt) {
    this.set("year", Value.fromBigInt(value));
  }
}

export class BridgeBSCHourData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("transferredToBSC", Value.fromBigInt(BigInt.zero()));
    this.set("totalTransferredToBSC", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("hour", Value.fromBigInt(BigInt.zero()));
    this.set("day", Value.fromBigInt(BigInt.zero()));
    this.set("week", Value.fromBigInt(BigInt.zero()));
    this.set("month", Value.fromBigInt(BigInt.zero()));
    this.set("year", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BridgeBSCHourData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save BridgeBSCHourData entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("BridgeBSCHourData", id.toString(), this);
    }
  }

  static load(id: string): BridgeBSCHourData | null {
    return changetype<BridgeBSCHourData | null>(
      store.get("BridgeBSCHourData", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transferredToBSC(): BigInt {
    let value = this.get("transferredToBSC");
    return value!.toBigInt();
  }

  set transferredToBSC(value: BigInt) {
    this.set("transferredToBSC", Value.fromBigInt(value));
  }

  get totalTransferredToBSC(): BigInt {
    let value = this.get("totalTransferredToBSC");
    return value!.toBigInt();
  }

  set totalTransferredToBSC(value: BigInt) {
    this.set("totalTransferredToBSC", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get hour(): BigInt {
    let value = this.get("hour");
    return value!.toBigInt();
  }

  set hour(value: BigInt) {
    this.set("hour", Value.fromBigInt(value));
  }

  get day(): BigInt {
    let value = this.get("day");
    return value!.toBigInt();
  }

  set day(value: BigInt) {
    this.set("day", Value.fromBigInt(value));
  }

  get week(): BigInt {
    let value = this.get("week");
    return value!.toBigInt();
  }

  set week(value: BigInt) {
    this.set("week", Value.fromBigInt(value));
  }

  get month(): BigInt {
    let value = this.get("month");
    return value!.toBigInt();
  }

  set month(value: BigInt) {
    this.set("month", Value.fromBigInt(value));
  }

  get year(): BigInt {
    let value = this.get("year");
    return value!.toBigInt();
  }

  set year(value: BigInt) {
    this.set("year", Value.fromBigInt(value));
  }
}

export class BridgeBSCDayData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("transferredToBSC", Value.fromBigInt(BigInt.zero()));
    this.set("totalTransferredToBSC", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("day", Value.fromBigInt(BigInt.zero()));
    this.set("week", Value.fromBigInt(BigInt.zero()));
    this.set("month", Value.fromBigInt(BigInt.zero()));
    this.set("year", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BridgeBSCDayData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save BridgeBSCDayData entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("BridgeBSCDayData", id.toString(), this);
    }
  }

  static load(id: string): BridgeBSCDayData | null {
    return changetype<BridgeBSCDayData | null>(
      store.get("BridgeBSCDayData", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transferredToBSC(): BigInt {
    let value = this.get("transferredToBSC");
    return value!.toBigInt();
  }

  set transferredToBSC(value: BigInt) {
    this.set("transferredToBSC", Value.fromBigInt(value));
  }

  get totalTransferredToBSC(): BigInt {
    let value = this.get("totalTransferredToBSC");
    return value!.toBigInt();
  }

  set totalTransferredToBSC(value: BigInt) {
    this.set("totalTransferredToBSC", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get day(): BigInt {
    let value = this.get("day");
    return value!.toBigInt();
  }

  set day(value: BigInt) {
    this.set("day", Value.fromBigInt(value));
  }

  get week(): BigInt {
    let value = this.get("week");
    return value!.toBigInt();
  }

  set week(value: BigInt) {
    this.set("week", Value.fromBigInt(value));
  }

  get month(): BigInt {
    let value = this.get("month");
    return value!.toBigInt();
  }

  set month(value: BigInt) {
    this.set("month", Value.fromBigInt(value));
  }

  get year(): BigInt {
    let value = this.get("year");
    return value!.toBigInt();
  }

  set year(value: BigInt) {
    this.set("year", Value.fromBigInt(value));
  }
}

export class BridgeBSCWeekData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("transferredToBSC", Value.fromBigInt(BigInt.zero()));
    this.set("totalTransferredToBSC", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("week", Value.fromBigInt(BigInt.zero()));
    this.set("month", Value.fromBigInt(BigInt.zero()));
    this.set("year", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BridgeBSCWeekData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save BridgeBSCWeekData entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("BridgeBSCWeekData", id.toString(), this);
    }
  }

  static load(id: string): BridgeBSCWeekData | null {
    return changetype<BridgeBSCWeekData | null>(
      store.get("BridgeBSCWeekData", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transferredToBSC(): BigInt {
    let value = this.get("transferredToBSC");
    return value!.toBigInt();
  }

  set transferredToBSC(value: BigInt) {
    this.set("transferredToBSC", Value.fromBigInt(value));
  }

  get totalTransferredToBSC(): BigInt {
    let value = this.get("totalTransferredToBSC");
    return value!.toBigInt();
  }

  set totalTransferredToBSC(value: BigInt) {
    this.set("totalTransferredToBSC", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get week(): BigInt {
    let value = this.get("week");
    return value!.toBigInt();
  }

  set week(value: BigInt) {
    this.set("week", Value.fromBigInt(value));
  }

  get month(): BigInt {
    let value = this.get("month");
    return value!.toBigInt();
  }

  set month(value: BigInt) {
    this.set("month", Value.fromBigInt(value));
  }

  get year(): BigInt {
    let value = this.get("year");
    return value!.toBigInt();
  }

  set year(value: BigInt) {
    this.set("year", Value.fromBigInt(value));
  }
}

export class BridgeBSCMonthData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("transferredToBSC", Value.fromBigInt(BigInt.zero()));
    this.set("totalTransferredToBSC", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("month", Value.fromBigInt(BigInt.zero()));
    this.set("year", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BridgeBSCMonthData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save BridgeBSCMonthData entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("BridgeBSCMonthData", id.toString(), this);
    }
  }

  static load(id: string): BridgeBSCMonthData | null {
    return changetype<BridgeBSCMonthData | null>(
      store.get("BridgeBSCMonthData", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transferredToBSC(): BigInt {
    let value = this.get("transferredToBSC");
    return value!.toBigInt();
  }

  set transferredToBSC(value: BigInt) {
    this.set("transferredToBSC", Value.fromBigInt(value));
  }

  get totalTransferredToBSC(): BigInt {
    let value = this.get("totalTransferredToBSC");
    return value!.toBigInt();
  }

  set totalTransferredToBSC(value: BigInt) {
    this.set("totalTransferredToBSC", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get month(): BigInt {
    let value = this.get("month");
    return value!.toBigInt();
  }

  set month(value: BigInt) {
    this.set("month", Value.fromBigInt(value));
  }

  get year(): BigInt {
    let value = this.get("year");
    return value!.toBigInt();
  }

  set year(value: BigInt) {
    this.set("year", Value.fromBigInt(value));
  }
}

export class Vester extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("address", Value.fromString(""));
    this.set("balance", Value.fromBigInt(BigInt.zero()));
    this.set("balance_contract", Value.fromBigInt(BigInt.zero()));
    this.set("contract", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Vester entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Vester entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Vester", id.toString(), this);
    }
  }

  static load(id: string): Vester | null {
    return changetype<Vester | null>(store.get("Vester", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): string {
    let value = this.get("address");
    return value!.toString();
  }

  set address(value: string) {
    this.set("address", Value.fromString(value));
  }

  get balance(): BigInt {
    let value = this.get("balance");
    return value!.toBigInt();
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }

  get balance_contract(): BigInt {
    let value = this.get("balance_contract");
    return value!.toBigInt();
  }

  set balance_contract(value: BigInt) {
    this.set("balance_contract", Value.fromBigInt(value));
  }

  get contract(): string {
    let value = this.get("contract");
    return value!.toString();
  }

  set contract(value: string) {
    this.set("contract", Value.fromString(value));
  }
}

export class VestingCount extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("count", Value.fromI32(0));
    this.set("totalAssests", Value.fromBigInt(BigInt.zero()));
    this.set("day", Value.fromBigInt(BigInt.zero()));
    this.set("week", Value.fromBigInt(BigInt.zero()));
    this.set("month", Value.fromBigInt(BigInt.zero()));
    this.set("year", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save VestingCount entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save VestingCount entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("VestingCount", id.toString(), this);
    }
  }

  static load(id: string): VestingCount | null {
    return changetype<VestingCount | null>(store.get("VestingCount", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): i32 {
    let value = this.get("count");
    return value!.toI32();
  }

  set count(value: i32) {
    this.set("count", Value.fromI32(value));
  }

  get totalAssests(): BigInt {
    let value = this.get("totalAssests");
    return value!.toBigInt();
  }

  set totalAssests(value: BigInt) {
    this.set("totalAssests", Value.fromBigInt(value));
  }

  get day(): BigInt {
    let value = this.get("day");
    return value!.toBigInt();
  }

  set day(value: BigInt) {
    this.set("day", Value.fromBigInt(value));
  }

  get week(): BigInt {
    let value = this.get("week");
    return value!.toBigInt();
  }

  set week(value: BigInt) {
    this.set("week", Value.fromBigInt(value));
  }

  get month(): BigInt {
    let value = this.get("month");
    return value!.toBigInt();
  }

  set month(value: BigInt) {
    this.set("month", Value.fromBigInt(value));
  }

  get year(): BigInt {
    let value = this.get("year");
    return value!.toBigInt();
  }

  set year(value: BigInt) {
    this.set("year", Value.fromBigInt(value));
  }
}

export class VestingHourCount extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("totalCount", Value.fromI32(0));
    this.set("totalAssests", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("hour", Value.fromBigInt(BigInt.zero()));
    this.set("day", Value.fromBigInt(BigInt.zero()));
    this.set("week", Value.fromBigInt(BigInt.zero()));
    this.set("month", Value.fromBigInt(BigInt.zero()));
    this.set("year", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save VestingHourCount entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save VestingHourCount entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("VestingHourCount", id.toString(), this);
    }
  }

  static load(id: string): VestingHourCount | null {
    return changetype<VestingHourCount | null>(
      store.get("VestingHourCount", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalCount(): i32 {
    let value = this.get("totalCount");
    return value!.toI32();
  }

  set totalCount(value: i32) {
    this.set("totalCount", Value.fromI32(value));
  }

  get totalAssests(): BigInt {
    let value = this.get("totalAssests");
    return value!.toBigInt();
  }

  set totalAssests(value: BigInt) {
    this.set("totalAssests", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get hour(): BigInt {
    let value = this.get("hour");
    return value!.toBigInt();
  }

  set hour(value: BigInt) {
    this.set("hour", Value.fromBigInt(value));
  }

  get day(): BigInt {
    let value = this.get("day");
    return value!.toBigInt();
  }

  set day(value: BigInt) {
    this.set("day", Value.fromBigInt(value));
  }

  get week(): BigInt {
    let value = this.get("week");
    return value!.toBigInt();
  }

  set week(value: BigInt) {
    this.set("week", Value.fromBigInt(value));
  }

  get month(): BigInt {
    let value = this.get("month");
    return value!.toBigInt();
  }

  set month(value: BigInt) {
    this.set("month", Value.fromBigInt(value));
  }

  get year(): BigInt {
    let value = this.get("year");
    return value!.toBigInt();
  }

  set year(value: BigInt) {
    this.set("year", Value.fromBigInt(value));
  }
}

export class VestingDayCount extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("totalCount", Value.fromI32(0));
    this.set("totalAssests", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("day", Value.fromBigInt(BigInt.zero()));
    this.set("week", Value.fromBigInt(BigInt.zero()));
    this.set("month", Value.fromBigInt(BigInt.zero()));
    this.set("year", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save VestingDayCount entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save VestingDayCount entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("VestingDayCount", id.toString(), this);
    }
  }

  static load(id: string): VestingDayCount | null {
    return changetype<VestingDayCount | null>(store.get("VestingDayCount", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalCount(): i32 {
    let value = this.get("totalCount");
    return value!.toI32();
  }

  set totalCount(value: i32) {
    this.set("totalCount", Value.fromI32(value));
  }

  get totalAssests(): BigInt {
    let value = this.get("totalAssests");
    return value!.toBigInt();
  }

  set totalAssests(value: BigInt) {
    this.set("totalAssests", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get day(): BigInt {
    let value = this.get("day");
    return value!.toBigInt();
  }

  set day(value: BigInt) {
    this.set("day", Value.fromBigInt(value));
  }

  get week(): BigInt {
    let value = this.get("week");
    return value!.toBigInt();
  }

  set week(value: BigInt) {
    this.set("week", Value.fromBigInt(value));
  }

  get month(): BigInt {
    let value = this.get("month");
    return value!.toBigInt();
  }

  set month(value: BigInt) {
    this.set("month", Value.fromBigInt(value));
  }

  get year(): BigInt {
    let value = this.get("year");
    return value!.toBigInt();
  }

  set year(value: BigInt) {
    this.set("year", Value.fromBigInt(value));
  }
}

export class VestingWeekCount extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("totalCount", Value.fromI32(0));
    this.set("totalAssests", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("week", Value.fromBigInt(BigInt.zero()));
    this.set("month", Value.fromBigInt(BigInt.zero()));
    this.set("year", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save VestingWeekCount entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save VestingWeekCount entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("VestingWeekCount", id.toString(), this);
    }
  }

  static load(id: string): VestingWeekCount | null {
    return changetype<VestingWeekCount | null>(
      store.get("VestingWeekCount", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalCount(): i32 {
    let value = this.get("totalCount");
    return value!.toI32();
  }

  set totalCount(value: i32) {
    this.set("totalCount", Value.fromI32(value));
  }

  get totalAssests(): BigInt {
    let value = this.get("totalAssests");
    return value!.toBigInt();
  }

  set totalAssests(value: BigInt) {
    this.set("totalAssests", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get week(): BigInt {
    let value = this.get("week");
    return value!.toBigInt();
  }

  set week(value: BigInt) {
    this.set("week", Value.fromBigInt(value));
  }

  get month(): BigInt {
    let value = this.get("month");
    return value!.toBigInt();
  }

  set month(value: BigInt) {
    this.set("month", Value.fromBigInt(value));
  }

  get year(): BigInt {
    let value = this.get("year");
    return value!.toBigInt();
  }

  set year(value: BigInt) {
    this.set("year", Value.fromBigInt(value));
  }
}

export class VestingMonthCount extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("totalCount", Value.fromI32(0));
    this.set("totalAssests", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("month", Value.fromBigInt(BigInt.zero()));
    this.set("year", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save VestingMonthCount entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save VestingMonthCount entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("VestingMonthCount", id.toString(), this);
    }
  }

  static load(id: string): VestingMonthCount | null {
    return changetype<VestingMonthCount | null>(
      store.get("VestingMonthCount", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalCount(): i32 {
    let value = this.get("totalCount");
    return value!.toI32();
  }

  set totalCount(value: i32) {
    this.set("totalCount", Value.fromI32(value));
  }

  get totalAssests(): BigInt {
    let value = this.get("totalAssests");
    return value!.toBigInt();
  }

  set totalAssests(value: BigInt) {
    this.set("totalAssests", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get month(): BigInt {
    let value = this.get("month");
    return value!.toBigInt();
  }

  set month(value: BigInt) {
    this.set("month", Value.fromBigInt(value));
  }

  get year(): BigInt {
    let value = this.get("year");
    return value!.toBigInt();
  }

  set year(value: BigInt) {
    this.set("year", Value.fromBigInt(value));
  }
}

export class Stacker extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("address", Value.fromString(""));
    this.set("stake", Value.fromBigInt(BigInt.zero()));
    this.set("day", Value.fromBigInt(BigInt.zero()));
    this.set("week", Value.fromBigInt(BigInt.zero()));
    this.set("month", Value.fromBigInt(BigInt.zero()));
    this.set("year", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Stacker entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Stacker entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Stacker", id.toString(), this);
    }
  }

  static load(id: string): Stacker | null {
    return changetype<Stacker | null>(store.get("Stacker", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): string {
    let value = this.get("address");
    return value!.toString();
  }

  set address(value: string) {
    this.set("address", Value.fromString(value));
  }

  get stake(): BigInt {
    let value = this.get("stake");
    return value!.toBigInt();
  }

  set stake(value: BigInt) {
    this.set("stake", Value.fromBigInt(value));
  }

  get day(): BigInt {
    let value = this.get("day");
    return value!.toBigInt();
  }

  set day(value: BigInt) {
    this.set("day", Value.fromBigInt(value));
  }

  get week(): BigInt {
    let value = this.get("week");
    return value!.toBigInt();
  }

  set week(value: BigInt) {
    this.set("week", Value.fromBigInt(value));
  }

  get month(): BigInt {
    let value = this.get("month");
    return value!.toBigInt();
  }

  set month(value: BigInt) {
    this.set("month", Value.fromBigInt(value));
  }

  get year(): BigInt {
    let value = this.get("year");
    return value!.toBigInt();
  }

  set year(value: BigInt) {
    this.set("year", Value.fromBigInt(value));
  }
}

export class StackerCount extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("count", Value.fromI32(0));
    this.set("totalStake", Value.fromBigInt(BigInt.zero()));
    this.set("day", Value.fromBigInt(BigInt.zero()));
    this.set("week", Value.fromBigInt(BigInt.zero()));
    this.set("month", Value.fromBigInt(BigInt.zero()));
    this.set("year", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save StackerCount entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save StackerCount entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("StackerCount", id.toString(), this);
    }
  }

  static load(id: string): StackerCount | null {
    return changetype<StackerCount | null>(store.get("StackerCount", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): i32 {
    let value = this.get("count");
    return value!.toI32();
  }

  set count(value: i32) {
    this.set("count", Value.fromI32(value));
  }

  get totalStake(): BigInt {
    let value = this.get("totalStake");
    return value!.toBigInt();
  }

  set totalStake(value: BigInt) {
    this.set("totalStake", Value.fromBigInt(value));
  }

  get day(): BigInt {
    let value = this.get("day");
    return value!.toBigInt();
  }

  set day(value: BigInt) {
    this.set("day", Value.fromBigInt(value));
  }

  get week(): BigInt {
    let value = this.get("week");
    return value!.toBigInt();
  }

  set week(value: BigInt) {
    this.set("week", Value.fromBigInt(value));
  }

  get month(): BigInt {
    let value = this.get("month");
    return value!.toBigInt();
  }

  set month(value: BigInt) {
    this.set("month", Value.fromBigInt(value));
  }

  get year(): BigInt {
    let value = this.get("year");
    return value!.toBigInt();
  }

  set year(value: BigInt) {
    this.set("year", Value.fromBigInt(value));
  }
}

export class StackerHourCount extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("totalCount", Value.fromI32(0));
    this.set("totalStake", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("hour", Value.fromBigInt(BigInt.zero()));
    this.set("day", Value.fromBigInt(BigInt.zero()));
    this.set("week", Value.fromBigInt(BigInt.zero()));
    this.set("month", Value.fromBigInt(BigInt.zero()));
    this.set("year", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save StackerHourCount entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save StackerHourCount entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("StackerHourCount", id.toString(), this);
    }
  }

  static load(id: string): StackerHourCount | null {
    return changetype<StackerHourCount | null>(
      store.get("StackerHourCount", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalCount(): i32 {
    let value = this.get("totalCount");
    return value!.toI32();
  }

  set totalCount(value: i32) {
    this.set("totalCount", Value.fromI32(value));
  }

  get totalStake(): BigInt {
    let value = this.get("totalStake");
    return value!.toBigInt();
  }

  set totalStake(value: BigInt) {
    this.set("totalStake", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get hour(): BigInt {
    let value = this.get("hour");
    return value!.toBigInt();
  }

  set hour(value: BigInt) {
    this.set("hour", Value.fromBigInt(value));
  }

  get day(): BigInt {
    let value = this.get("day");
    return value!.toBigInt();
  }

  set day(value: BigInt) {
    this.set("day", Value.fromBigInt(value));
  }

  get week(): BigInt {
    let value = this.get("week");
    return value!.toBigInt();
  }

  set week(value: BigInt) {
    this.set("week", Value.fromBigInt(value));
  }

  get month(): BigInt {
    let value = this.get("month");
    return value!.toBigInt();
  }

  set month(value: BigInt) {
    this.set("month", Value.fromBigInt(value));
  }

  get year(): BigInt {
    let value = this.get("year");
    return value!.toBigInt();
  }

  set year(value: BigInt) {
    this.set("year", Value.fromBigInt(value));
  }
}

export class StackerDayCount extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("totalCount", Value.fromI32(0));
    this.set("totalStake", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("day", Value.fromBigInt(BigInt.zero()));
    this.set("week", Value.fromBigInt(BigInt.zero()));
    this.set("month", Value.fromBigInt(BigInt.zero()));
    this.set("year", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save StackerDayCount entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save StackerDayCount entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("StackerDayCount", id.toString(), this);
    }
  }

  static load(id: string): StackerDayCount | null {
    return changetype<StackerDayCount | null>(store.get("StackerDayCount", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalCount(): i32 {
    let value = this.get("totalCount");
    return value!.toI32();
  }

  set totalCount(value: i32) {
    this.set("totalCount", Value.fromI32(value));
  }

  get totalStake(): BigInt {
    let value = this.get("totalStake");
    return value!.toBigInt();
  }

  set totalStake(value: BigInt) {
    this.set("totalStake", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get day(): BigInt {
    let value = this.get("day");
    return value!.toBigInt();
  }

  set day(value: BigInt) {
    this.set("day", Value.fromBigInt(value));
  }

  get week(): BigInt {
    let value = this.get("week");
    return value!.toBigInt();
  }

  set week(value: BigInt) {
    this.set("week", Value.fromBigInt(value));
  }

  get month(): BigInt {
    let value = this.get("month");
    return value!.toBigInt();
  }

  set month(value: BigInt) {
    this.set("month", Value.fromBigInt(value));
  }

  get year(): BigInt {
    let value = this.get("year");
    return value!.toBigInt();
  }

  set year(value: BigInt) {
    this.set("year", Value.fromBigInt(value));
  }
}

export class StackerWeekCount extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("totalCount", Value.fromI32(0));
    this.set("totalStake", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("week", Value.fromBigInt(BigInt.zero()));
    this.set("month", Value.fromBigInt(BigInt.zero()));
    this.set("year", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save StackerWeekCount entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save StackerWeekCount entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("StackerWeekCount", id.toString(), this);
    }
  }

  static load(id: string): StackerWeekCount | null {
    return changetype<StackerWeekCount | null>(
      store.get("StackerWeekCount", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalCount(): i32 {
    let value = this.get("totalCount");
    return value!.toI32();
  }

  set totalCount(value: i32) {
    this.set("totalCount", Value.fromI32(value));
  }

  get totalStake(): BigInt {
    let value = this.get("totalStake");
    return value!.toBigInt();
  }

  set totalStake(value: BigInt) {
    this.set("totalStake", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get week(): BigInt {
    let value = this.get("week");
    return value!.toBigInt();
  }

  set week(value: BigInt) {
    this.set("week", Value.fromBigInt(value));
  }

  get month(): BigInt {
    let value = this.get("month");
    return value!.toBigInt();
  }

  set month(value: BigInt) {
    this.set("month", Value.fromBigInt(value));
  }

  get year(): BigInt {
    let value = this.get("year");
    return value!.toBigInt();
  }

  set year(value: BigInt) {
    this.set("year", Value.fromBigInt(value));
  }
}

export class StackerMonthCount extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("totalCount", Value.fromI32(0));
    this.set("totalStake", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("month", Value.fromBigInt(BigInt.zero()));
    this.set("year", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save StackerMonthCount entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save StackerMonthCount entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("StackerMonthCount", id.toString(), this);
    }
  }

  static load(id: string): StackerMonthCount | null {
    return changetype<StackerMonthCount | null>(
      store.get("StackerMonthCount", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalCount(): i32 {
    let value = this.get("totalCount");
    return value!.toI32();
  }

  set totalCount(value: i32) {
    this.set("totalCount", Value.fromI32(value));
  }

  get totalStake(): BigInt {
    let value = this.get("totalStake");
    return value!.toBigInt();
  }

  set totalStake(value: BigInt) {
    this.set("totalStake", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get month(): BigInt {
    let value = this.get("month");
    return value!.toBigInt();
  }

  set month(value: BigInt) {
    this.set("month", Value.fromBigInt(value));
  }

  get year(): BigInt {
    let value = this.get("year");
    return value!.toBigInt();
  }

  set year(value: BigInt) {
    this.set("year", Value.fromBigInt(value));
  }
}
