// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SwapFilled extends ethereum.Event {
  get params(): SwapFilled__Params {
    return new SwapFilled__Params(this);
  }
}

export class SwapFilled__Params {
  _event: SwapFilled;

  constructor(event: SwapFilled) {
    this._event = event;
  }

  get bep20Addr(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get ethTxHash(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get toAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class SwapPairCreated extends ethereum.Event {
  get params(): SwapPairCreated__Params {
    return new SwapPairCreated__Params(this);
  }
}

export class SwapPairCreated__Params {
  _event: SwapPairCreated;

  constructor(event: SwapPairCreated) {
    this._event = event;
  }

  get ethRegisterTxHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get bep20Addr(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get erc20Addr(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get symbol(): string {
    return this._event.parameters[3].value.toString();
  }

  get name(): string {
    return this._event.parameters[4].value.toString();
  }

  get decimals(): i32 {
    return this._event.parameters[5].value.toI32();
  }
}

export class SwapStarted extends ethereum.Event {
  get params(): SwapStarted__Params {
    return new SwapStarted__Params(this);
  }
}

export class SwapStarted__Params {
  _event: SwapStarted;

  constructor(event: SwapStarted) {
    this._event = event;
  }

  get bep20Addr(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get erc20Addr(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get fromAddr(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get feeAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class ZamBridgeBSC extends ethereum.SmartContract {
  static bind(address: Address): ZamBridgeBSC {
    return new ZamBridgeBSC("ZamBridgeBSC", address);
  }

  bep20Implementation(): Address {
    let result = super.call(
      "bep20Implementation",
      "bep20Implementation():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_bep20Implementation(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "bep20Implementation",
      "bep20Implementation():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  bep20ProxyAdmin(): Address {
    let result = super.call(
      "bep20ProxyAdmin",
      "bep20ProxyAdmin():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_bep20ProxyAdmin(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "bep20ProxyAdmin",
      "bep20ProxyAdmin():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  createSwapPair(
    ethTxHash: Bytes,
    erc20Addr: Address,
    name: string,
    symbol: string,
    decimals: i32
  ): Address {
    let result = super.call(
      "createSwapPair",
      "createSwapPair(bytes32,address,string,string,uint8):(address)",
      [
        ethereum.Value.fromFixedBytes(ethTxHash),
        ethereum.Value.fromAddress(erc20Addr),
        ethereum.Value.fromString(name),
        ethereum.Value.fromString(symbol),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(decimals))
      ]
    );

    return result[0].toAddress();
  }

  try_createSwapPair(
    ethTxHash: Bytes,
    erc20Addr: Address,
    name: string,
    symbol: string,
    decimals: i32
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createSwapPair",
      "createSwapPair(bytes32,address,string,string,uint8):(address)",
      [
        ethereum.Value.fromFixedBytes(ethTxHash),
        ethereum.Value.fromAddress(erc20Addr),
        ethereum.Value.fromString(name),
        ethereum.Value.fromString(symbol),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(decimals))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  fillETH2BSCSwap(
    ethTxHash: Bytes,
    erc20Addr: Address,
    toAddress: Address,
    amount: BigInt
  ): boolean {
    let result = super.call(
      "fillETH2BSCSwap",
      "fillETH2BSCSwap(bytes32,address,address,uint256):(bool)",
      [
        ethereum.Value.fromFixedBytes(ethTxHash),
        ethereum.Value.fromAddress(erc20Addr),
        ethereum.Value.fromAddress(toAddress),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_fillETH2BSCSwap(
    ethTxHash: Bytes,
    erc20Addr: Address,
    toAddress: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "fillETH2BSCSwap",
      "fillETH2BSCSwap(bytes32,address,address,uint256):(bool)",
      [
        ethereum.Value.fromFixedBytes(ethTxHash),
        ethereum.Value.fromAddress(erc20Addr),
        ethereum.Value.fromAddress(toAddress),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  filledETHTx(param0: Bytes): boolean {
    let result = super.call("filledETHTx", "filledETHTx(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);

    return result[0].toBoolean();
  }

  try_filledETHTx(param0: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall("filledETHTx", "filledETHTx(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  swapFee(): BigInt {
    let result = super.call("swapFee", "swapFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_swapFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("swapFee", "swapFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  swapMappingBSC2ETH(param0: Address): Address {
    let result = super.call(
      "swapMappingBSC2ETH",
      "swapMappingBSC2ETH(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toAddress();
  }

  try_swapMappingBSC2ETH(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "swapMappingBSC2ETH",
      "swapMappingBSC2ETH(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  swapMappingETH2BSC(param0: Address): Address {
    let result = super.call(
      "swapMappingETH2BSC",
      "swapMappingETH2BSC(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toAddress();
  }

  try_swapMappingETH2BSC(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "swapMappingETH2BSC",
      "swapMappingETH2BSC(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateSwapPairCall extends ethereum.Call {
  get inputs(): CreateSwapPairCall__Inputs {
    return new CreateSwapPairCall__Inputs(this);
  }

  get outputs(): CreateSwapPairCall__Outputs {
    return new CreateSwapPairCall__Outputs(this);
  }
}

export class CreateSwapPairCall__Inputs {
  _call: CreateSwapPairCall;

  constructor(call: CreateSwapPairCall) {
    this._call = call;
  }

  get ethTxHash(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get erc20Addr(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get name(): string {
    return this._call.inputValues[2].value.toString();
  }

  get symbol(): string {
    return this._call.inputValues[3].value.toString();
  }

  get decimals(): i32 {
    return this._call.inputValues[4].value.toI32();
  }
}

export class CreateSwapPairCall__Outputs {
  _call: CreateSwapPairCall;

  constructor(call: CreateSwapPairCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class FillETH2BSCSwapCall extends ethereum.Call {
  get inputs(): FillETH2BSCSwapCall__Inputs {
    return new FillETH2BSCSwapCall__Inputs(this);
  }

  get outputs(): FillETH2BSCSwapCall__Outputs {
    return new FillETH2BSCSwapCall__Outputs(this);
  }
}

export class FillETH2BSCSwapCall__Inputs {
  _call: FillETH2BSCSwapCall;

  constructor(call: FillETH2BSCSwapCall) {
    this._call = call;
  }

  get ethTxHash(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get erc20Addr(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get toAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class FillETH2BSCSwapCall__Outputs {
  _call: FillETH2BSCSwapCall;

  constructor(call: FillETH2BSCSwapCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get bep20Impl(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get fee(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get ownerAddr(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get bep20ProxyAdminAddr(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetSwapFeeCall extends ethereum.Call {
  get inputs(): SetSwapFeeCall__Inputs {
    return new SetSwapFeeCall__Inputs(this);
  }

  get outputs(): SetSwapFeeCall__Outputs {
    return new SetSwapFeeCall__Outputs(this);
  }
}

export class SetSwapFeeCall__Inputs {
  _call: SetSwapFeeCall;

  constructor(call: SetSwapFeeCall) {
    this._call = call;
  }

  get fee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetSwapFeeCall__Outputs {
  _call: SetSwapFeeCall;

  constructor(call: SetSwapFeeCall) {
    this._call = call;
  }
}

export class SwapBSC2ETHCall extends ethereum.Call {
  get inputs(): SwapBSC2ETHCall__Inputs {
    return new SwapBSC2ETHCall__Inputs(this);
  }

  get outputs(): SwapBSC2ETHCall__Outputs {
    return new SwapBSC2ETHCall__Outputs(this);
  }
}

export class SwapBSC2ETHCall__Inputs {
  _call: SwapBSC2ETHCall;

  constructor(call: SwapBSC2ETHCall) {
    this._call = call;
  }

  get bep20Addr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SwapBSC2ETHCall__Outputs {
  _call: SwapBSC2ETHCall;

  constructor(call: SwapBSC2ETHCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
